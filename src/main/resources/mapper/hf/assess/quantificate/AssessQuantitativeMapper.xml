<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.paladin.hf.mapper.assess.quantificate.AssessQuantitativeMapper">

    <select id="findDepartmentUser" resultType="com.paladin.hf.service.assess.quantificate.vo.AssessQuantitativeUserVO">
		SELECT 
			b.id AS userId,
			b.org_unit_id AS unitId,
			b.name AS userName,
			b.record_create_time AS recordCreateTime,
			b.sex AS sex,
			b.oeducation AS oeducation,
			b.job_duties AS jobDuties,
			b.job_rank AS jobRank,
			b.is_assessor AS isAssessor,
			b.org_agency_id AS agencyId,
			b.is_assessor AS isAssessor,
		    case when c.id is null then 0 else 1 end isAssessed
		FROM org_user b LEFT JOIN assess_quantitative_result c on c.cycle_id = #{param.assessCycleId} and c.user_id = b.id
		WHERE b.is_delete = 0 
		<if test="param.name != null">
			AND b.name LIKE CONCAT('%',#{param.name},'%')
	    </if>
	    
	    <if test="unitParam.assessTeamId!=null">
		        and b.org_assess_team_id=#{unitParam.assessTeamId}
	    </if>
	    
	    <if test="unitParam.unitId!=null">
		        and b.org_unit_id=#{unitParam.unitId}
	    </if>
		<if test="unitParam.unitIds!=null">
            and b.org_unit_id in 
            <foreach collection="unitParam.unitIds" index="index" item="item" open="(" separator="," close=")">  
                #{item}  
            </foreach> 
        </if>       
        <if test="unitParam.agencyId!=null">
		        and b.org_agency_id=#{unitParam.agencyId}
	    </if>
	    
		<if test="unitParam.agencyIds!=null">
            and b.org_agency_id in 
            <foreach collection="unitParam.agencyIds" index="index" item="item" open="(" separator="," close=")">  
                #{item}  
            </foreach> 
        </if>
        
	    <if test="param.jobRank != null">
			AND b.job_rank = #{param.jobRank}
	    </if>	
	    <if test="param.isAssessor != null">
			AND b.is_assessor = #{param.isAssessor}
	    </if>
	    <if test="param.startRecordCreateTime != null">
			AND b.record_create_time &gt;= #{param.startRecordCreateTime}
	    </if>
	    <if test="param.endRecordCreateTime != null">
			AND b.record_create_time &lt;= #{param.endRecordCreateTime}
	    </if>
	    <if test="param.isAssessed != null">    
			<if test="param.isAssessed == 1">
				AND	c.id IS NOT NULL
			</if>
			<if test="param.isAssessed == 0">
				AND	c.id IS NULL
			</if>			
	    </if>
	    ORDER BY b.org_unit_id ASC,b.record_create_time DESC	    
	</select>
	
	<select id="findAgencyUser" resultType="com.paladin.hf.service.assess.quantificate.vo.AssessQuantitativeUserVO">
		SELECT 
			b.id AS userId,
			b.org_unit_id AS unitId,
			b.name AS userName,
			b.record_create_time AS recordCreateTime,
			b.sex AS sex,
			b.oeducation AS oeducation,
			b.job_duties AS jobDuties,
			b.job_rank AS jobRank,
			b.is_assessor AS isAssessor,
			b.org_agency_id AS agencyId,
			b.is_assessor AS isAssessor,
		    case when c.id is null then 0 else 1 end isAssessed
		FROM org_user b LEFT JOIN assess_quantitative_result c on c.cycle_id = #{param.assessCycleId} and c.user_id = b.id
		WHERE b.is_delete = 0 
		<if test="param.name != null">
			AND b.name LIKE CONCAT('%',#{param.name},'%')
	    </if>
	    
	    <if test="unitParam.assessTeamId!=null">
		        and b.org_assess_team_id=#{unitParam.assessTeamId}
	    </if>
	    
	    <if test="unitParam.unitId!=null">
		        and b.org_unit_id=#{unitParam.unitId}
	    </if>
		<if test="unitParam.unitIds!=null">
            and b.org_unit_id in 
            <foreach collection="unitParam.unitIds" index="index" item="item" open="(" separator="," close=")">  
                #{item}  
            </foreach> 
        </if>       
        <if test="unitParam.agencyId!=null">
		        and b.org_agency_id=#{unitParam.agencyId}
	    </if>
	    
		<if test="unitParam.agencyIds!=null">
            and b.org_agency_id in 
            <foreach collection="unitParam.agencyIds" index="index" item="item" open="(" separator="," close=")">  
                #{item}  
            </foreach> 
        </if>
        
	    <if test="param.jobRank != null">
			AND b.job_rank = #{param.jobRank}
	    </if>	
	    <if test="param.isAssessor != null">
			AND b.is_assessor = #{param.isAssessor}
	    </if>
	    <if test="param.startRecordCreateTime != null">
			AND b.record_create_time &gt;= #{param.startRecordCreateTime}
	    </if>
	    <if test="param.endRecordCreateTime != null">
			AND b.record_create_time &lt;= #{param.endRecordCreateTime}
	    </if>
	    <if test="param.isAssessed != null">    
			<if test="param.isAssessed == 1">
				AND	c.id IS NOT NULL
			</if>
			<if test="param.isAssessed == 0">
				AND	c.id IS NULL
			</if>			
	    </if>
	    ORDER BY b.org_unit_id ASC,b.record_create_time DESC	    
	</select>    
	    

	<!-- <select id="findUserAssessDetail" parameterType="map" resultType="com.netmatch.model.console.AssessQuantitativeExt">
		SELECT a.id AS prizepunishId,
		       a.org_user_id AS orgUserId,
		       a.dict_code AS dictCode,
		       a.happen_time AS happenTime,
		       a.place AS place,
		       a.checks AS checks,
		       a.check_people AS checkPeople,
		       a.operation_state AS operationState,
		       a.examine_state AS examineState,
		       a.examine_people AS examinePeople,
		       c.id AS extraId,
		       c.extra_type AS extraType,
		       c.alter_upper AS alterUpper,
		       c.alter_lower AS alterLower,
		       c.accumulate_upper AS accumulateUpper,
		       b.score
		FROM prizepunish a
		LEFT JOIN assess_quantitative b ON b.prize_punish_id = a.id
		LEFT JOIN assess_item_extra c ON c.id = b.assess_item_extra_id
		WHERE a.org_user_id = #{userId}
		AND a.happen_time &gt;= #{startTime}
		AND a.happen_time &lt;= #{endTime}
		<if test="eventType != null">
			AND a.dict_code= #{eventType}
	    </if>
		ORDER BY a.create_time DESC
	</select> -->
	
	
	<select id="findAssessEventScore" resultType="com.paladin.hf.model.assess.quantificate.AssessEventScore">
		SELECT 
		       c.id AS extraId,
		       c.extra_type AS extraType,
		       c.extra_description AS extraDescription,
		       c.alter_upper AS alterUpper,
		       c.alter_lower AS alterLower,
		       c.accumulate_upper AS accumulateUpper,
		       b.id AS assessQuantitativeId,
		       b.score
		FROM assess_quantitative b, assess_item_extra c
		WHERE  c.id = b.assess_item_extra_id 
		AND b.cycle_id = #{cycleId} AND b.user_id = #{userId} AND b.prize_punish_id =#{prizePunishId}
		ORDER BY b.create_time DESC		
	</select>
	
	<select id="findUserAssessScore" resultType="com.paladin.hf.model.assess.quantificate.AssessEventScore">
		SELECT 
		       c.id AS extraId,
		       c.extra_type AS extraType,
		       c.extra_description AS extraDescription,
		       c.alter_upper AS alterUpper,
		       c.alter_lower AS alterLower,
		       c.accumulate_upper AS accumulateUpper,
		       b.id AS assessQuantitativeId,
		       b.score
		FROM assess_quantitative b, assess_item_extra c, prizepunish d
		WHERE  c.id = b.assess_item_extra_id  AND d.id = b.prize_punish_id AND d.examine_state = '1'
		AND b.cycle_id = #{cycleId} AND b.user_id = #{userId}
		ORDER BY b.create_time DESC		
	</select>
	
</mapper>